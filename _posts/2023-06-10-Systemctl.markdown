---
layout: post
title: "Como manter um processo rodando para sempre"
date: 2023-06-10 18:30:00 -0300
categories: [Linux, Comandos]
tags: linux comandos systemctl systemd bots rotina
image: "/assets/img/Systemctl-24-7.png"
---

> Bots n√£o dormem. Bots n√£o d√£o problema. 
> *Mas se algo acontecer, que reiniciem automaticamente*. üòÇ

# Systemctl

O comando `systemctl` √© o gerenciador do `systemd`, que gerencia o Linux. √â uma ferramenta essencial para administra√ß√£o de servidores Linux e permite total controle sobre os servi√ßos em execu√ß√£o no sistema. O `systemctl` pode ser usado para controlar um servi√ßo pelos comandos `status`, `start`, `stop` e `restart`.

Um servi√ßo do sistema operacional pode ser usado para manter bots no ar ou para qualquer outra coisa que seja executada sempre ou em intervalos bem definidos. O RastreioBot, por exemplo, possui dois servi√ßos.

#### 1. O bot que fala com as pessoas

Existe um servi√ßo principal que √© respons√°vel por responder as pessoas, coletar os c√≥digos de pacotes enviados e tamb√©m responder a comandos, como `/start`, `/gif` etc. Este servi√ßo n√£o procura por atualiza√ß√µes nos pacotes. Ele apenas consulta o banco de dados. N√£o h√° qualquer consulta ao sistema dos Correios neste servi√ßo.

#### 2. A rotina que verifica os pacotes

O segundo servi√ßo √© a rotina que verifica os pacotes, que faz a comunica√ß√£o com os Correios. Esta rotina √© executada usando-se um servi√ßo do sistema operacional e √© executada em intervalos definidos. Isto √©, espera-se o tempo escolhido(`RestartSec`) antes de executar a rotina novamente. A vantagem desta abordagem em rela√ß√£o ao uso de um *cronjob* √© que evita que uma rotina seja iniciada em paralelo √† anterior caso ela n√£o tenha terminado. Ou seja, n√£o importa a dura√ß√£o de tempo para que o arquivo python seja executado. O tempo entre as rotinas √© sempre o mesmo e n√£o h√° execu√ß√µes em paralelo.

## Criar um servi√ßo

Crie um arquivo chamado *\<nome do servi√ßo\>.service* na pasta `/lib/systemd/system` com o conte√∫do abaixo:

```shell
# cd /lib/systemd/system
# nano <nome do servi√ßo>.service
```

```
[Unit]
Description=<DESCRI√á√ÉO>
After=multi-user.target

[Service]
Type=simple
WorkingDirectory=<DIRET√ìRIO>
ExecStart=<COMANDO>
Restart=always
RestartSec=<INTERVALO>

[Install]
WantedBy=multi-user.target
```

Defina os valores conforme sua prefer√™ncia.

- `Description`: Descri√ß√£o do servi√ßo; 
- `After`: Em que momento o servi√ßo ser√° iniciado;
- `Type`: Tipo de servi√ßo;
- `WorkingDirectory`: Diret√≥rio do servi√ßo;
- `ExecStart`: Comando para iniciar o servi√ßo;
- `Restart`: Quando reiniciar o servi√ßo;
- `RestartSec`: Tempo de espera em segundos entre as tentativas de reiniciar o servi√ßo;
- `WantedBy`: Determina em quais condi√ß√µes o servi√ßo ser√° iniciado caso habilitado para in√≠ciar automaticamente.

#### Exemplo de arquivo preenchido:

```
[Unit]
Description=RastreioBot
After=multi-user.target

[Service]
Type=simple
WorkingDirectory=/usr/local/bin/RastreioBot
ExecStart=/usr/bin/python3 /usr/local/bin/RastreioBot/rastreiobot.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
```

Servi√ßo de nome [RastreioBot](#1-o-bot-que-fala-com-as-pessoas), localizado na pasta */usr/local/bin/RastreioBot/*, e que deve ser reiniciado em 10 segundos caso pare por algum motivo.

### Carregar altera√ß√µes

Reinicie o servi√ßo do *systemd* **sempre** que um arquivo `.service` for alterado.

```shell
# systemctl daemon-reload
```

### Habilitar in√≠cio autom√°tico

√â necess√°rio habilitar um servi√ßo para que ele seja iniciado junto do sistema operacional. Ou seja, para que o servi√ßo seja iniciado caso o servidor seja reiniciado.

```shell
# systemctl enable <nome do servi√ßo>.service
```

### Iniciar servi√ßo

```shell
# systemctl start <nome do servi√ßo>.service
```

### Parar um servi√ßo

```shell
# systemctl stop <nome do servi√ßo>.service
```

### Reiniciar um servi√ßo
```shell
# systemctl restart <nome do servi√ßo>.service
```

### Verificar o status
```shell
# systemctl status <nome do servi√ßo>.service
```

### Verificar logs
```shell
# journalctl -u <nome do servi√ßo>.service
```
